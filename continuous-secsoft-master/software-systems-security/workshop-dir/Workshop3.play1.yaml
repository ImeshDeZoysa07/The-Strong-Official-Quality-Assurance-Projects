---
  - name: "Create RHEL product"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" product create --organization-id "{{ sat_orgid }}" --name "{{ content_rhel_name }}"
  - name: "Create RHEL repo in the product"
    command:
      hammer --username "{{ sat_user }}" --password "{{ sat_pass }}" repository create --content-type yum --label "{{ content_rhel_label }}" --name "{{ content_rhel_name }}" --organization-id "{{ sat_orgid }}" --product "{{ content_rhel_name }}" --url "{{ content_rhel_url }}"
  - name: "Create Sat Tools product"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" product create --organization-id "{{ sat_orgid }}" --name "{{ content_sattools_name }}"
  - name: "Create Sat Tools repo in the product"
    command:
      hammer --username "{{ sat_user }}" --password "{{ sat_pass }}" repository create --content-type yum --label "{{ content_sattools_label }}" --name "{{ content_sattools_name }}" --organization-id "{{ sat_orgid }}" --product "{{ content_sattools_name }}" --url "{{ content_sattools_url }}"

  - name: "Sync RHEL via async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" repository synchronize --organization-id 1 --product "{{ content_rhel_name }}" --name "{{ content_rhel_name }}" --async
    when: "sat_repos_sync == 'async'"
  - name: "Sync RHEL without async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" repository synchronize --organization-id 1 --product "{{ content_rhel_name }}" --name "{{ content_rhel_name }}"
    when: "sat_repos_sync == 'sync'"
  - name: "Sync Sat Tools via async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" repository synchronize --organization-id 1 --product "{{ content_sattools_name }}" --name "{{ content_sattools_name }}" --async
    when: "sat_repos_sync == 'async'"
  - name: "Sync Sat Tools without async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" repository synchronize --organization-id 1 --product "{{ content_sattools_name }}" --name "{{ content_sattools_name }}"
    when: "sat_repos_sync == 'sync'"

  - name: "Create content view"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" content-view create --name "{{ content_content_view_name }}" --organization-id "{{ sat_orgid }}"
  - name: "Add RHEL repo to the content view"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" content-view add-repository --name "{{ content_content_view_name }}" --organization-id "{{ sat_orgid }}" --product "{{ content_rhel_name }}" --repository "{{ content_rhel_name }}"
  - name: "Add Sat Tools repo to the content view"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" content-view add-repository --name "{{ content_content_view_name }}" --organization-id "{{ sat_orgid }}" --product "{{ content_sattools_name }}" --repository "{{ content_sattools_name }}"

  - name: "Publish and promote content view via async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" content-view publish --name "{{ content_content_view_name }}" --organization-id "{{ sat_orgid }}" --async
    when: "sat_repos_sync == 'async'"
  - name: "Publish and promote content view without async"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" content-view publish --name "{{ content_content_view_name }}" --organization-id "{{ sat_orgid }}"
    when: "sat_repos_sync == 'sync'"

  - name: "Create client domain (on 6.4+)"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" domain create --name "{{ client_domain }}" --organizations "{{ sat_org }}" --location "{{ sat_location }}"
    when: "sat_version is version('6.3', '>')"
  - name: "Create client domain (on 6.3-)"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" domain create --name "{{ client_domain }}" --organizations "{{ sat_org }}" --locations "{{ sat_location }}"
    when: "sat_version is version('6.3', '<=')"

  - name: "Create host group"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" hostgroup create --name "{{ content_hostgroup }}" --lifecycle-environment Library --content-view "{{ sat_org }} View" --query-organization "{{ sat_org }}"
  - name: "Create activation key"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" activation-key create --organization "{{ sat_org }}" --name "{{ content_activationkey }}" --lifecycle-environment Library --content-view "{{ sat_org }} View"
  - name: "Determine '{{ content_rhel_name }}' subscription ID"
    shell:
      hammer --csv -u "{{ sat_user }}" -p "{{ sat_pass }}" subscription list --organization "{{ sat_org }}" --search 'name = "{{ content_rhel_name }}"' | grep -v '^ID,'
    register: rhel_out
  - name: "Determine '{{ content_sattools_name }}' subscription ID"
    shell:
      hammer --csv -u "{{ sat_user }}" -p "{{ sat_pass }}" subscription list --organization "{{ sat_org }}" --search 'name = "{{ content_sattools_name }}"' | grep -v '^ID,'
    register: sattools_out
  - name: "Make sure only one row was returned for both subscriptions"
    assert:
      that:
        - "rhel_out.stdout_lines|length == 1"
        - "sattools_out.stdout_lines|length == 1"
  - name: "Add subscriptions to the activation key"
    command:
      hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" activation-key add-subscription --organization "{{ sat_org }}" --name "{{ content_activationkey }}" --subscription-id "{{ item }}"
    with_items:
      - "{{ (rhel_out.stdout_lines|last).split(',')[0] }}"
      - "{{ (sattools_out.stdout_lines|last).split(',')[0] }}"
...
