# This test creates and synces 8 repos, creates and publishes 8 CVs each with
# one repo, creates lifecycle environment and publishes these repos into it.
#
# To cleanup:
#
# hammer lifecycle-environment delete --name test_sync_repositories_le --organization-id 1
# for cv_id in $( hammer --output csv --no-headers content-view list --search 'label ~ test_sync_repositories_cv' | cut -d ',' -f 1 ); do
#     hammer content-view remove-from-environment --id $cv_id --lifecycle-environment Library --organization-id 1
#     hammer content-view delete --id $cv_id --organization-id 1
# done
# sleep 30
# hammer product delete --organization-id 1 --name test_sync_repositories_product
---
- hosts: satellite6
  remote_user: root
  gather_facts: no
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  vars:
    test_sync_repositories_count: 8
    test_sync_repositories_url_template: "http://repos.example.com/repo*"
    test_sync_repositories_product: "test_sync_repositories_product"
    test_sync_repositories_le: "test_sync_repositories_le"
    test_sync_repositories_repo_template: "test_sync_repositories_repo*"
    test_sync_repositories_cv_template: "test_sync_repositories_cv*"
    test_sync_repositories_max_sync_secs: 1800
  roles:
    - wait-for-task-script
  tasks:
    - name: "Create product"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" product create --organization-id "{{ sat_orgid }}" --name "{{ test_sync_repositories_product }}"
      register: create_product
      failed_when: "create_product.rc != 0 and 'Name has already been taken for a product in this organization' not in create_product.stderr"
      changed_when: "create_product.rc == 0 and 'Product created' in create_product.stdout"
    - name: "Create repos"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" repository create --organization-id "{{ sat_orgid }}" --product "{{ test_sync_repositories_product }}" --content-type yum --download-policy on_demand --name "{{ test_sync_repositories_repo_template|replace('*', item) }}" --url "{{ test_sync_repositories_url_template|replace('*', item) }}"
      register: create_repo
      loop: "{{ range(1, test_sync_repositories_count+1)|list }}"
    - name: "Start sync asynchronously"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" repository synchronize --organization-id "{{ sat_orgid }}" --product "{{ test_sync_repositories_product }}" --name "{{ test_sync_repositories_repo_template|replace('*', item) }}" --async
      loop: "{{ range(1, test_sync_repositories_count+1)|list }}"
      register: start_sync
      ignore_errors: true
    - name: "Check that start message is sane"
      assert:
        that: "'Repository is being synchronized in task' in item.stdout"
        msg: 'Pass'
      loop: "{{ start_sync.results }}"
      loop_control:
        label: "{{ test_sync_repositories_repo_template|replace('*', item.item) }}"
    - name: "Wait for synces to finish"
      command:
        /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[6].split('.')[0] }}" "{{ test_sync_repositories_max_sync_secs }}"
      loop: "{{ start_sync.results }}"
      loop_control:
        label: "{{ test_sync_repositories_repo_template|replace('*', item.item) }}"
      register: wait_sync
      ignore_errors: yes
    - name: "Print sync results"
      debug:
        msg: "SyncRepositories {{ item.stdout_lines[-2] }} to {{ item.stdout_lines[-1] }}"
      loop: "{{ wait_sync.results }}"
      when: "item.rc is defined and item.rc == 0"

    - name: "Create lifecycle environment"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" lifecycle-environment create --organization-id "{{ sat_orgid }}" --prior Library --name "{{ test_sync_repositories_le }}"
      register: create_le
    - name: "Create content views"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view create --organization-id "{{ sat_orgid }}" --product "{{ test_sync_repositories_product }}" --repositories "{{ test_sync_repositories_repo_template|replace('*', item) }}" --name "{{ test_sync_repositories_cv_template|replace('*', item) }}"
      register: create_cv
      loop: "{{ range(1, test_sync_repositories_count+1)|list }}"
    - name: "Publish content views"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view publish --async --organization-id "{{ sat_orgid }}" --name "{{ test_sync_repositories_cv_template|replace('*', item) }}"
      register: start_publish
      loop: "{{ range(1, test_sync_repositories_count+1)|list }}"
    - name: "Wait for publish to finish"
      command:
        /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[7].split('.')[0] }}" "{{ test_sync_repositories_max_sync_secs }}"
      loop: "{{ start_publish.results }}"
      loop_control:
        label: "{{ test_sync_repositories_cv_template|replace('*', item.item) }}"
      register: wait_publish
      ignore_errors: yes
    - name: "Print publish results"
      debug:
        msg: "PublishContentViews {{ item.stdout_lines[-2] }} to {{ item.stdout_lines[-1] }}"
      loop: "{{ wait_publish.results }}"
      when: "item.rc is defined and item.rc == 0"

    - name: "Promote content views"
      command:
        hammer -u "{{ sat_user}}" -p "{{ sat_pass }}" content-view version promote --async --organization-id "{{ sat_orgid }}" --content-view "{{ test_sync_repositories_cv_template|replace('*', item) }}" --version "1.0" --to-lifecycle-environment "{{ test_sync_repositories_le }}"
      register: start_promote
      loop: "{{ range(1, test_sync_repositories_count+1)|list }}"
    - name: "Wait for promote to finish"
      command:
        /root/wait-for-task.sh "{{ sat_user }}" "{{ sat_pass }}" "{{ item.stdout.split()[7].split('.')[0] }}" "{{ test_sync_repositories_max_sync_secs }}"
      loop: "{{ start_promote.results }}"
      loop_control:
        label: "{{ test_sync_repositories_cv_template|replace('*', item.item) }}"
      register: wait_promote
      ignore_errors: yes
    - debug:
        var: wait_promote
    - name: "Print promote results"
      debug:
        msg: "PromoteContentViews {{ item.stdout_lines[-2] }} to {{ item.stdout_lines[-1] }}"
      loop: "{{ wait_promote.results }}"
      when: "item.rc is defined and item.rc == 0"
...
